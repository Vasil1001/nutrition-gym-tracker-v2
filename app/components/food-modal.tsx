































































































































































































































export default NutritionProgress}  )    </div>      </div>        </Card>          </CardContent>            </div>              ))}                />                  color={color}                  label={label}                  target={goals[key].target}                  current={goals[key].current}                  key={key}                <ProgressCircle              {nutrients.map(({ key, label, color }) => (            <div className="mt-4 grid grid-cols-3 gap-4">          <CardContent>        <Card>      <div className="">      )}        </Card>          </CardContent>            </div>              </p>                </span>                  {bmiData.bmi.toFixed(1)} - {bmiData.bmiStatus.status}                <span style={{ color: bmiData.bmiStatus.color }}>                BMI:{' '}              <p className="mt-8">            <div>            </div>              </div>                <span>Obese</span>                <span>Over</span>                <span>Normal</span>                <span>Under</span>              <div className="absolute mt-5 flex w-full justify-between text-xs text-white/65">              {/* Labels */}              </div>                </div>                  {bmiData.bmi.toFixed(1)}                  style={{ color: bmiData.bmiStatus.color }}>                  className="absolute -left-3 -top-5 text-[0.85rem] font-bold"                <div                style={{ left: `${bmiData.bmiPosition}%` }}>                className="absolute top-0 -mt-3 h-7 w-0.5 bg-black"              <div              {/* Update BMI Indicator position calculation */}              {/* BMI Indicator */}                }}></div>                  width: `${100 - bmiData.overweightMax}%`                  left: `${bmiData.overweightMax}%`,                style={{                className="absolute h-4 rounded-r bg-red-500"              <div              {/* Obese */}                }}></div>                  width: `${bmiData.overweightMax - bmiData.normalMax}%`                  left: `${bmiData.normalMax}%`,                style={{                className="absolute h-4 bg-orange-500"              <div              {/* Overweight */}                }}></div>                  width: `${bmiData.normalMax - bmiData.underweightMax}%`                  left: `${bmiData.underweightMax}%`,                style={{                className="absolute h-4 bg-green-500"              <div              {/* Normal weight */}                style={{ width: `${bmiData.underweightMax}%` }}></div>                className="absolute h-4 rounded-l bg-blue-500"              <div              {/* Underweight */}            <div className="relative mt-4 h-6">          <CardContent className="pt-4">        <Card className="mb-4">      {bmiData.bmi > 0 && (      )}        </div>          </div>            <Onboarding onComplete={handleGoalsUpdate} onSaveTargets={handleGoalsUpdate} />            </button>              &times;              className="absolute right-2 top-2 text-2xl text-gray-500 hover:text-gray-700">              onClick={handleCloseOnboarding}            <button          <div className="relative w-full max-w-md rounded-lg bg-[#34343f] p-6 shadow-lg">        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/75">      {showOnboarding && (      </Card>        </CardContent>          ))}            </div>              {unit ?? ''}              {goals[key].target}              <span>{label}</span>              key={key}>              className="flex w-full flex-col items-center gap-2 rounded-lg p-2.5 font-bold tracking-tight dark:bg-[#19191f]"            <div          {nutrients.map(({ key, label, unit }) => (        <CardContent className="mt-3 flex justify-between gap-4 text-sm">        </CardHeader>          )}            />              onClick={handleSetTargetsClick}              className="h-5 w-5 animate-pulse cursor-pointer text-blue-500 hover:text-blue-600"            <Pencil          {session && (          <CardTitle className="text-xl">Daily Goals</CardTitle>        <CardHeader className="flex flex-row items-center justify-between pb-0">      <Card className="mb-4">    <div className="mx-auto">  return (  ]    // { key: 'fat', label: 'Fat', color: '#F44336', unit: 'g' }    { key: 'carbs', label: 'Carbs', color: '#4CAF50', unit: 'g' }    { key: 'protein', label: 'Protein', color: '#2196F3', unit: 'g' },    { key: 'calories', label: 'Calories', color: '#FF9800' },  }> = [    unit?: string    color: string    label: string    key: keyof NutritionGoals  const nutrients: Array<{  }, [initialGoals])    setGoals(initialGoals)  useEffect(() => {  }    handleCloseOnboarding()    }      onGoalsUpdate(newGoals)    if (onGoalsUpdate) {    setGoals(newGoals)    }      })        overweightMax: 30        normalMax: 25,        underweightMax: 18.5,        bmiStatus: bmiStatus,        bmiPosition: bmiPosition,        bmi: newTargets.bmi,      setBmiData({      const bmiPosition = calculateBmiPosition(newTargets.bmi)      const bmiStatus = getBmiStatus(newTargets.bmi)    if (newTargets.bmi) {    // Store BMI data when targets are updated    }      carbs: { current: goals.carbs.current, target: newTargets.carbs.target }      protein: { current: goals.protein.current, target: newTargets.protein.target },      calories: { current: goals.calories.current, target: newTargets.calories.target },    const newGoals = {  const handleGoalsUpdate = (newTargets: any) => {  }    setShowOnboarding(false)  const handleCloseOnboarding = () => {  }    setShowOnboarding(true)  const handleSetTargetsClick = () => {  }    return Math.min(100, 30 + ((bmi - 30) / 5) * (35 - 30))    if (bmi < 30) return 25 + ((bmi - 25) / 5) * (30 - 25)    if (bmi < 25) return 18.5 + ((bmi - 18.5) / 6.5) * (25 - 18.5)    if (bmi < 18.5) return (bmi / 18.5) * 18.5    // Calculate position on a scale of 0-100  const calculateBmiPosition = (bmi: number) => {  }    return { status: 'Obese', color: '#F44336' } // Red    if (bmi < 30) return { status: 'Overweight', color: '#FF9800' } // Orange    if (bmi < 25) return { status: 'Healthy Weight', color: '#4CAF50' } // Green    if (bmi < 18.5) return { status: 'Underweight', color: '#2196F3' } // Blue  const getBmiStatus = (bmi: number) => {  })    overweightMax: 30    normalMax: 25,    underweightMax: 18.5,    bmiStatus: { status: '', color: '' },    bmiPosition: 0,    bmi: 0,  const [bmiData, setBmiData] = useState({  const [showOnboarding, setShowOnboarding] = useState(false)  const [goals, setGoals] = useState<NutritionGoals>(session ? initialGoals : defaultGoals)  }    carbs: { current: 0, target: 0 }    protein: { current: 0, target: 0 },    calories: { current: 0, target: 0 },  const defaultGoals = {  const { session } = useAuth()const NutritionProgress: React.FC<NutritionProgressProps> = ({ initialGoals, onGoalsUpdate }) => {}  onGoalsUpdate?: (goals: NutritionGoals) => void  initialGoals: NutritionGoalsinterface NutritionProgressProps {}  carbs: { current: number; target: number }  protein: { current: number; target: number }  calories: { current: number; target: number }interface NutritionGoals {import { useAuth } from '../context/AuthContext'// import { ProgressRings } from './progress-rings'import { ProgressCircle } from './progress-circle'import Onboarding from '@/components/ui/overview/onboarding/onboarding'import { Pencil } from 'lucide-react'import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'import React, { useEffect, useState } from 'react''use client'